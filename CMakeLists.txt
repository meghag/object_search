cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

find_package(octomap REQUIRED)
include_directories(${OCTOMAP_INCLUDE_DIRS})
link_directories(${OCTOMAP_LIBRARY_DIRS})
link_libraries(${OCTOMAP_LIBRARIES})

rosbuild_add_library(${PROJECT_NAME} src/set_marker.cpp)
rosbuild_add_library(pcd_utils src/pcd_utils.cpp)

rosbuild_add_executable(read_data src/read_data.cpp)
target_link_libraries(read_data pcd_utils)

#rosbuild_add_executable(laser_scan_reader src/laser_scan_reader.cpp)
#target_link_libraries(laser_scan_reader pcd_utils)

#rosbuild_add_executable(test_laser src/test_laser.cpp)
#rosbuild_add_executable(laser_assembler_server src/laser_assembler_server.cpp)

rosbuild_add_executable(move_torso src/move_torso.cpp)
rosbuild_add_executable(move_right_arm src/move_right_arm.cpp)
rosbuild_add_executable(move_left_arm src/move_left_arm.cpp)

rosbuild_add_executable(move_head_manual src/move_head_manual.cpp)
rosbuild_add_executable(open_gripper_manual src/open_gripper_manual.cpp)

#rosbuild_add_executable(euclidean_seg src/euclidean_segmentation.cpp)

#rosbuild_add_executable(pointcloud_to_hull src/TableTopObject.cpp src/pointcloud_to_hull.cpp src/kinematics.cpp src/collision_testing.cpp)
#target_link_libraries(pointcloud_to_hull gpcl octomap octomath)

rosbuild_add_executable(planner src/planner.cpp src/TableTopObject.cpp)
target_link_libraries(planner ${PROJECT_NAME} gpcl octomap octomath pcd_utils)

rosbuild_add_executable(random_planner src/random_planner.cpp src/TableTopObject.cpp)
target_link_libraries(random_planner gpcl octomap octomath pcd_utils)

rosbuild_add_executable(manipulator src/manipulator.cpp)
target_link_libraries(manipulator ${PROJECT_NAME} gpcl pcd_utils)
